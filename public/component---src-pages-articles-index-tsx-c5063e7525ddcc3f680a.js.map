{"version":3,"file":"component---src-pages-articles-index-tsx-c5063e7525ddcc3f680a.js","mappings":"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","sources":["webpack://personal-portfolio/./src/components/elements/button/index.tsx","webpack://personal-portfolio/./src/helpers/date.ts","webpack://personal-portfolio/./src/helpers/post.ts","webpack://personal-portfolio/./src/pages/articles/index.tsx"],"sourcesContent":["import React from 'react';\nimport { Link } from \"gatsby\";\nimport './styles.scss';\n\ntype ButtonType = {\n  src: string,\n  width?: string,\n  target?: string,\n  children: React.ReactNode,\n}\nexport default function Button({src, children, width = '150px', target = '_self'}: ButtonType) {\n  const style = { \"--btn-width\": width } as React.CSSProperties;\n  return (\n    <Link to={src} className=\"button\" style={style} target={target}>\n      <div className=\"button__line\"></div>\n      <div className=\"button__line\"></div>\n      <span className=\"button__text\">{children}</span>\n    </Link>\n  )\n}\n","export function monthDisplay ( month ) {\n  switch ( month ) {\n    case 0:\n      return 'January';\n    case 1:\n      return 'February';\n    case 2:\n      return 'March';\n    case 3:\n      return 'April';\n    case 4:\n      return 'May';\n    case 5:\n      return 'June';\n    case 6:\n      return 'July';\n    case 7:\n      return 'August';\n    case 8:\n      return 'September';\n    case 9:\n      return 'October';\n    case 10:\n      return 'November';\n    case 11:\n      return 'December';\n  }\n}\n","import {monthDisplay} from \"@app/helpers/date\";\n\ninterface PostImage {\n  url: string;\n  alt: string;\n}\n\ninterface Category {\n  name: string;\n}\n\nexport type PostDataType = {\n  content: string,\n  thumbnail: PostImage | false,\n  date: string,\n  uri: string,\n  title: string,\n  categories: Category[],\n}\n\n/**\n * Builds the post object for later use\n *\n * @param post\n * @param contentLength\n * @constructor\n */\nexport function PostData( post, contentLength = 25 ): PostDataType {\n  const { excerpt } = post;\n\n  // Build the excerpt data\n  let intro = excerpt.match(/<[a-z]>(.*?)<\\/[a-z]>/);\n      intro = intro[1];\n  const content = intro.split(' ').filter( (e, i) => i < contentLength ).join(' ');\n\n  // Get the date information\n  const date = new Date(post.date);\n\n  // Build potential featured image\n  let thumbnail: PostImage | false = false;\n  if ( post.featuredImage ) {\n    thumbnail = {\n      url: post.featuredImage.node.mediaItemUrl,\n      alt: post.featuredImage.node.altText\n    };\n  }\n\n\n  return {\n    content,\n    thumbnail,\n    date: `${monthDisplay(date.getMonth())} ${date.getDate()}, ${date.getFullYear()}`,\n    uri: post.uri,\n    title: post.title,\n    categories: post.categories.nodes\n  }\n}\n","import * as React from \"react\"\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport {graphql, Link} from \"gatsby\";\nimport \"./styles.scss\";\nimport {monthDisplay} from \"@app/helpers/date\";\nimport {PostData} from \"@app/helpers/post\";\nimport Button from \"@app/components/elements/button\";\nimport {AnimatePresence, motion} from \"framer-motion\";\n\nconst BlogPage: React.FC<PageProps> = ({data}) => {\n  const posts = [...data.allWpPost.nodes];\n  const first = posts.length ? PostData(posts.splice(0,1)[0]) : false;\n\n  return (\n    <section className={'blogPage'}>\n      <div className={'banner-wrap'} role={'banner'}>\n        <div className={'banner-text'}>\n          Articles\n        </div>\n      </div>\n\n      {first &&\n          <div className={'blogLead'}>\n              <div>\n                  <div className={'leadInfo'}>\n                      <h2>{first.title}</h2>\n                      <div className={'post-meta'}>\n                        {monthDisplay(new Date(first.date).getMonth())} {new Date(first.date).getDay()}, {new Date(first.date).getFullYear()}\n                          | {\n                        first.categories.length &&\n                        first.categories.map( (e,i) => {\n                          return <Link to={`/category/${e.slug}`}><span className={'category'} key={`cat-${i}`}>{e.name}</span></Link>\n                        })\n                      }\n                      </div>\n                      <div className={'excerpt'} dangerouslySetInnerHTML={{__html: `<p>${first.content}...</p>`}} />\n\n                      <Button src={`${first.uri}`}>Read</Button>\n                  </div>\n              </div>\n              <div>\n                {first.thumbnail &&\n                    <div className={'leadImage'}>\n                        <img src={first.thumbnail.url} alt={first.thumbnail.alt} />\n                    </div>\n                }\n              </div>\n          </div>\n      }\n\n      <div className={'wrapper'}>\n        <div className={'blogGrid'}>\n          <AnimatePresence>\n            { posts.map( (e, i) => {\n              const data = PostData(e);\n\n              return (\n                <motion.div\n                  initial={{\n                    opacity: 0,\n                    translateY: '100px',\n                  }}\n                  whileInView={{\n                    opacity: 1,\n                    translateY: 0,\n                  }}\n                  amount={'all'}\n                  transition={{ duration: 0.5 }}\n                  viewport={{ once: true }}\n                  className={'blogGridItem'}\n                  key={`articles-${i}`}>\n                  <div className={'blogInnerItem'}>\n                    <div className={'blogImage'}>\n                      { data.thumbnail &&\n                          <img src={data.thumbnail.url} alt={data.thumbnail.alt} />\n                      }\n                    </div>\n                    <h2>{e.title}</h2>\n                    <div className={'post-meta'}>\n                      {data.date}\n                      | {\n                      data.categories.length &&\n                      data.categories.map( (e,i) => {\n                        return <Link to={`/category/${e.slug}`}><span className={'category'} key={`cat-${i}`}>{e.name}</span></Link>\n                      })}\n                    </div>\n                    <div className={'excerpt'} dangerouslySetInnerHTML={{__html: `<p>${data.content}...</p>`}} />\n\n                    <Button src={`${data.uri}`}>Read</Button>\n                  </div>\n                </motion.div>\n              )\n            })}\n          </AnimatePresence>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default BlogPage;\n\nexport const Head: HeadFC = () => <title>Blog Articles | Erik James Thomas - Senior Software Engineer</title>\n\nexport const pageQuery = graphql`\n  query MyQuery {\n  allWpPost(sort: {date: DESC}) {\n    nodes {\n      id\n      title\n      content\n      excerpt\n      uri\n      date\n      categories {\n        nodes {\n          name\n          slug\n        }\n      }\n      featuredImage {\n        node {\n          id\n          mediaItemUrl\n          altText\n        }\n      }\n    }\n  }\n}`;\n"],"names":["Button","_ref","src","children","width","target","style","React","Link","to","className","monthDisplay","month","PostData","post","contentLength","excerpt","intro","match","content","split","filter","e","i","join","date","Date","thumbnail","featuredImage","url","node","mediaItemUrl","alt","altText","getMonth","getDate","getFullYear","uri","title","categories","nodes","data","posts","_toConsumableArray","allWpPost","first","length","splice","role","getDay","map","slug","key","name","dangerouslySetInnerHTML","__html","AnimatePresence","motion","initial","opacity","translateY","whileInView","amount","transition","duration","viewport","once","Head"],"sourceRoot":""}