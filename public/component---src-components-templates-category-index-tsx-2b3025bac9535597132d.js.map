{"version":3,"file":"component---src-components-templates-category-index-tsx-2b3025bac9535597132d.js","mappings":"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","sources":["webpack://personal-portfolio/./src/components/elements/button/index.tsx","webpack://personal-portfolio/./src/components/templates/category/index.tsx","webpack://personal-portfolio/./src/helpers/date.ts","webpack://personal-portfolio/./src/helpers/post.ts"],"sourcesContent":["import React from 'react';\nimport { Link } from \"gatsby\";\nimport './styles.scss';\n\ntype ButtonType = {\n  src: string,\n  width?: string,\n  target?: string,\n  children: React.ReactNode,\n}\nexport default function Button({src, children, width = '150px', target = '_self'}: ButtonType) {\n  const style = { \"--btn-width\": width } as React.CSSProperties;\n  return (\n    <Link to={src} className=\"button\" style={style} target={target}>\n      <div className=\"button__line\"></div>\n      <div className=\"button__line\"></div>\n      <span className=\"button__text\">{children}</span>\n    </Link>\n  )\n}\n","import * as React from \"react\"\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport { graphql } from \"gatsby\";\nimport \"./styles.scss\";\nimport {monthDisplay} from \"@app/helpers/date\";\nimport {PostData} from \"@app/helpers/post\";\nimport Button from \"@app/components/elements/button\";\n\nconst CategoryPage: React.FC<PageProps> = ({data, pageContext}) => {\n  const posts = data.allWpPost.nodes;\n  const first = posts.length ? PostData(posts.splice(0,1)[0]) : false;\n\n  return (\n    <section className={'blogPage'}>\n      <div className={'banner-wrap'} role={'banner'}>\n        <div className={'category-text'}>\n          <h1>Category: {pageContext.name}</h1>\n        </div>\n        <div className={'banner-text'}>\n          Articles\n        </div>\n      </div>\n\n      {first &&\n          <div className={'blogLead'}>\n              <div>\n                  <div className={'leadInfo'}>\n                      <h2>{first.title}</h2>\n                      <div className={'post-meta'}>\n                        {monthDisplay(new Date(first.date).getMonth())} {new Date(first.date).getDay()}, {new Date(first.date).getFullYear()}\n                          | {\n                        first.categories.length &&\n                        first.categories.map( (e,i) => {\n                          return <span className={'category'} key={`cat-${i}`}>{e.name}</span>\n                        })\n                      }\n                      </div>\n                      <div className={'excerpt'} dangerouslySetInnerHTML={{__html: `<p>${first.content}...</p>`}} />\n\n                      <Button src={`${first.uri}`}>Read</Button>\n                  </div>\n              </div>\n              <div>\n                {first.thumbnail &&\n                    <div className={'leadImage'}>\n                        <img src={first.thumbnail.url} alt={first.thumbnail.alt} />\n                    </div>\n                }\n              </div>\n          </div>\n      }\n\n      <div className={'wrapper'}>\n        <div className={'blogGrid'}>\n          { posts.map( (e, i) => {\n            const data = PostData(e);\n\n            return (\n              <div className={'blogGridItem'} key={`articles-${i}`}>\n                <div className={'blogInnerItem'}>\n                  <div className={'blogImage'}>\n                    { data.thumbnail &&\n                        <img src={data.thumbnail.url} alt={data.thumbnail.alt} />\n                    }\n                  </div>\n                  <h2>{e.title}</h2>\n                  <div className={'post-meta'}>\n                    {data.date}\n                    | {\n                    data.categories.length &&\n                    data.categories.map( (e,i) => {\n                      return <span className={'category'} key={`cat-${i}`}>{e.name}</span>\n                    })}\n                  </div>\n                  <div className={'excerpt'} dangerouslySetInnerHTML={{__html: `<p>${data.content}...</p>`}} />\n\n                  <Button src={`${data.uri}`}>Read</Button>\n                </div>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default CategoryPage;\n\nexport const Head: HeadFC = () => <title>Blog Articles | Erik James Thomas - Senior Software Engineer</title>\n\nexport const pageQuery = graphql`\n  query MyQuery($slug: String!) {\n  allWpPost(\n    filter: {categories: {nodes: {elemMatch: {slug: {eq: $slug}}}}}\n    sort: {date: DESC}\n  ) {\n    nodes {\n      id\n      title\n      content\n      excerpt\n      uri\n      date\n      categories {\n        nodes {\n          name\n        }\n      }\n      featuredImage {\n        node {\n          id\n          mediaItemUrl\n          altText\n        }\n      }\n    }\n  }\n}`;\n","export function monthDisplay ( month ) {\n  switch ( month ) {\n    case 0:\n      return 'January';\n    case 1:\n      return 'February';\n    case 2:\n      return 'March';\n    case 3:\n      return 'April';\n    case 4:\n      return 'May';\n    case 5:\n      return 'June';\n    case 6:\n      return 'July';\n    case 7:\n      return 'August';\n    case 8:\n      return 'September';\n    case 9:\n      return 'October';\n    case 10:\n      return 'November';\n    case 11:\n      return 'December';\n  }\n}\n","import {monthDisplay} from \"@app/helpers/date\";\n\ninterface PostImage {\n  url: string;\n  alt: string;\n}\n\ninterface Category {\n  name: string;\n}\n\nexport type PostDataType = {\n  content: string,\n  thumbnail: PostImage | false,\n  date: string,\n  uri: string,\n  title: string,\n  categories: Category[],\n}\n\n/**\n * Builds the post object for later use\n *\n * @param post\n * @param contentLength\n * @constructor\n */\nexport function PostData( post, contentLength = 25 ): PostDataType {\n  const { excerpt } = post;\n\n  // Build the excerpt data\n  let intro = excerpt.match(/<[a-z]>(.*?)<\\/[a-z]>/);\n      intro = intro[1];\n  const content = intro.split(' ').filter( (e, i) => i < contentLength ).join(' ');\n\n  // Get the date information\n  const date = new Date(post.date);\n\n  // Build potential featured image\n  let thumbnail: PostImage | false = false;\n  if ( post.featuredImage ) {\n    thumbnail = {\n      url: post.featuredImage.node.mediaItemUrl,\n      alt: post.featuredImage.node.altText\n    };\n  }\n\n\n  return {\n    content,\n    thumbnail,\n    date: `${monthDisplay(date.getMonth())} ${date.getDate()}, ${date.getFullYear()}`,\n    uri: post.uri,\n    title: post.title,\n    categories: post.categories.nodes\n  }\n}\n"],"names":["Button","_ref","src","children","width","target","style","React","Link","to","className","data","pageContext","posts","allWpPost","nodes","first","length","PostData","splice","role","name","title","monthDisplay","Date","date","getMonth","getDay","getFullYear","categories","map","e","i","key","dangerouslySetInnerHTML","__html","content","uri","thumbnail","url","alt","Head","month","post","contentLength","excerpt","intro","match","split","filter","join","featuredImage","node","mediaItemUrl","altText","getDate"],"sourceRoot":""}